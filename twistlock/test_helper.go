package twistlock

import (
	"strconv"

	"github.com/hashicorp/terraform/helper/resource"
)

// walker is a datastructure that can be walked to accumulate attribute
// name/value pairs for comparing against Terraform state.
type walker interface {
	Walk() []walkResult
}

// walkResult is accumulated when walking a walker.
// `key` accumulates the path through the structure being walked to the leaf
// where each component is separated by a `.`
// `val` is the leaf value in the structure identified by the path in `key`.
type walkResult struct {
	key string
	val string
}

type byWalkResult []walkResult

func (r byWalkResult) Len() int      { return len(r) }
func (r byWalkResult) Swap(i, j int) { r[i], r[j] = r[j], r[i] }
func (r byWalkResult) Less(i, j int) bool {
	r_i := r[i].key + "/" + r[i].val
	r_j := r[j].key + "/" + r[j].val
	return r_i < r_j
}

// prepend `k` onto the key of `r`
func (r walkResult) prepend(k string) walkResult {
	newKey := k
	if r.key != "" {
		newKey = k + "." + r.key
	}
	return walkResult{
		key: newKey,
		val: r.val,
	}
}

// AttrLeaf represents the value of an attribute in an attribute structure
type AttrLeaf string

func (s AttrLeaf) Walk() []walkResult {
	return []walkResult{{"", string(s)}}
}

// AttrList represents a TypeList component in an attribute structure
type AttrList []walker

func (v AttrList) Walk() []walkResult {
	attrs := make([]walkResult, 0)
	attrs = append(attrs, walkResult{"#", strconv.Itoa(len(v))})
	for i, w := range v {
		ss := w.Walk()
		for _, s := range ss {
			attrs = append(attrs, s.prepend(strconv.Itoa(i)))
		}
	}
	return attrs
}

// AttrMap represents a map-like (either a schema.Schema or a TypeMap)
// component in an attribute structure
type AttrMap map[string]walker

func (v AttrMap) Walk() []walkResult {
	attrs := make([]walkResult, 0)
	for k, w := range v {
		ss := w.Walk()
		for _, s := range ss {
			attrs = append(attrs, s.prepend(k))
		}
	}
	return attrs
}

// CheckTerraformState ensures the state for the Terraform resource `name`
// matches the `expected` state.
//
// Creates a TestCheckFunc for each attribute generated by walking `expected`
// and returns the composition of those functions.
//
// Allows replacing large blocks of `resource.TestCheckResourceAttr` check
// function calls with a single call that's passed a data structure resembling
// the schema for the resource being tested.
//
// This is useful for testing even mildly complicated Terraform schemas since
// it takes away the need to deal with the counts and indices portions of
// terraform attributes.
func CheckTerraformState(name string, expected walker) resource.TestCheckFunc {
	attrs := expected.Walk()

	checkFuncs := make([]resource.TestCheckFunc, len(attrs))
	for i, attr := range attrs {
		checkFuncs[i] = resource.TestCheckResourceAttr(name, attr.key, attr.val)
	}

	return resource.ComposeTestCheckFunc(checkFuncs...)
}
